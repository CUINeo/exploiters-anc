#ifndef PROFILE_H
#define PROFILE_H

#include <stdint.h>
#include <stdlib.h>
#include "macros.h"

extern volatile uint64_t timer;

static inline void code_barrier(void)
{
    asm volatile("cpuid\n" :: "a" (0) : "%rbx", "%rcx", "%rdx");
}

static inline void data_barrier(void)
{
    asm volatile("mfence\n" ::: "memory");
}

static inline uint64_t rdtscp(void)
{
    uint64_t cycles_low, cycles_high;

    asm volatile("rdtscp\n" :
		"=a" (cycles_low), "=d" (cycles_high) ::
		"%rcx");

    return ((uint64_t)cycles_high << 32) | cycles_low;
}

int init_profiler(void);
uint64_t time_access(volatile char *p);
void profile_page_table(
    uint64_t *timings,
    struct cache *cache,
    struct page_level *level,
    size_t n,
    size_t ncache_lines,
    size_t nrounds,
    volatile char *target,
    size_t stride);
void filter_signals(
    uint64_t *timings,
    struct page_format *fmt,
    volatile void *target,
    size_t npages,
    size_t ncache_lines,
    size_t npages_per_line,
    size_t nlevels);
unsigned profile_page_tables(
    unsigned *slot_error_distances,
    struct cache *cache,
    struct page_format *fmt,
    size_t nrounds,
    volatile void *target);

#endif
